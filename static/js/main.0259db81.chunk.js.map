{"version":3,"sources":["SelectImage.jsx","ImageList.jsx","App.js","serviceWorker.js","index.js"],"names":["SelectImage","channels","split","generateDropDownOptions","map","channel","i","value","key","selectedImage","this","props","className","onChange","event","onSelect","target","Component","ImageList","state","selectedChannel","generateImages","times","time","Date","Math","random","url","outputDirectory","src","length","App","beforeTimes","afterTimes","inputSaved","sort","changeChannel","setState","displayImages","handleChange","val","saveTimes","tmpBefore","replace","tmpAfter","window","alert","displayInput","placeholder","name","type","onClick","bind","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0259db81.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SelectImage extends Component {\n    channels = \"L1-GDS_CALIB_STRAIN L1-ASC_X_TR_A_PIT_OUT_DQ L1-ASC_Y_TR_B_NSUM_OUT_DQ L1-ASC_X_TR_B_PIT_OUT_DQ L1-ASC_Y_TR_A_NSUM_OUT_DQ L1-ASC_Y_TR_B_PIT_OUT_DQ L1-ASC_X_TR_A_NSUM_OUT_DQ L1-ASC_X_TR_B_NSUM_OUT_DQ L1-ASC_Y_TR_A_PIT_OUT_DQ L1-ASC_Y_TR_B_YAW_OUT_DQ L1-ASC_X_TR_B_YAW_OUT_DQ L1-ASC_Y_TR_A_YAW_OUT_DQ L1-ASC_X_TR_A_YAW_OUT_DQ\".split(' ');\n\n    generateDropDownOptions = () => {\n        return this.channels.map((channel, i) => {\n            return <option value={channel} key={i}>{channel}</option>\n        })\n    }\n\n    render() {\n        const { selectedImage } = this.props;\n        return (\n            <div className=\"SelectImage\">\n                <h1>Select channel</h1>\n                <select onChange={(event) => this.props.onSelect(event.target.value)} value={selectedImage || 'Select a Channel'}>\n                    {this.generateDropDownOptions()}\n                </select>\n            </div>);\n    }\n}\n\nexport default SelectImage;","import React, { Component } from 'react';\n\nexport default class ImageList extends Component {\n    state = {\n        selectedChannel: null\n    }\n\n    \n\n    generateImages = (channel) => {\n        return this.props.times.map(time => {\n            // no important\n            let key = new Date() + Math.random(0, 1000);\n            //\n            let url = `https://ldas-jobs.ligo-la.caltech.edu/~jane.glanzer/omega_scans/output/${this.props.outputDirectory}/${time}/plots/${channel}-qscan_whitened-16.png`;\n            return (<img src={url} className=\"image\" key={key} />);\n        })\n    }\n\n    render() {\n        const { channel } = this.props;\n        if (!channel) return null;\n        return (\n            <div className=\"ImageList\">\n                <h2>Plots from {this.props.times[0]} -- {this.props.times[this.props.times.length - 1]}</h2>\n                {this.generateImages(channel)}\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport SelectImage from './SelectImage.jsx';\nimport ImageList from './ImageList';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.saveTimes = this.saveTimes.bind(this);\n  }\n  state = {\n    selectedChannel: null,\n    beforeTimes: null,\n    afterTimes: null,\n    inputSaved: false\n  }\n\n  beforeTimes = \"1260244844.813 1259228526.063 1260219512.188 1260944009.688 1260804098.867 1260162922.688 1260239848.063 1260262343.625 1259299563.906 1260285681.813 1260201272.188 1257449232.813 1260176895.438 1260220059.313 1261486545.563 1261067040.313 1259674229.438 1259271247.125 1259236985.813 1261493573.563 1259257956.875 1259221795.063 1261866525.375 1261477028.438 1261680207.563 1257271937.938 1259255342.063 1259233408.219 1258292832.625 1261275723.625 1257303861.625 1259232455.813 1259207087.625 1257475272.813 1258203238.047 1260810096.68 1260943484.188 1260202460.938 1261344663.125 1260205095.688 1259265016.188 1259258396.438 1259240781.938 1258143921.188 1259229559.219 1260305896.406 1259252626.563 1260278743.938 1261477495.563 1260147457.063\".split(' ').sort();\n  afterTimes = \"1264178264.875 1264213799.875 1263833493.031 1264016560.906 1264023162.18 1265047718.852 1263976802.781 1263260637.094 1263147869.828 1263814624.844 1264213712.016 1264080741.688 1265147847.039 1263190745.938 1264211561.859 1264036181.844 1265307972.234 1264790037.438 1264650916.938 1265281246.086 1263846186.094 1264106088.875 1264097895.281 1264233726.188 1264135227.656 1263893589.188 1265047463.945 1263905520.625 1265071965.555 1264308734.719 1264319097.375 1265001864.328 1263645652.797 1263156159.813 1265128384.258 1265127938.164 1263793574.188 1265123911.992 1264315732.031 1264297050.625 1265096318.656 1263132943.813 1265122594.852 1264031460.688 1265110146.18 1263322990.406 1265085141.969 1263115483.344 1264055760.063 1265281011.336 1263742727.875 1265325147.695 1263118132.875 1264252843.844 1263848178.563 1265016632.828 1263228930.563 1265213234.711 1263623006.313 1264411496.219 1263295197.109 1263643021.438 1263764572.766 1265128391.336 1263362038.922 1264256919.789 1265115742.617 1264170967.594 1265121881.586 1265123907.469 1265001086.766 1263290096.219 1263347158.875 1263973593.844 1263638583.438 1263975227.125 1264221971.156 1263870974.094 1264099912.094 1264366261.125 1264017507.797 1265002187.156 1265123369.063 1263641493.719 1263967737.688 1264245896.531 1265122931.18 1264725739.469 1264331791.031 1264414038.938 1264650655.938 1264426451.844 1263897015.406 1264171810.422 1262754129.438 1263847850.969 1263341736.563 1265119354.023 1265281237.078 1264295895.813\".split(' ').sort();\n  changeChannel = (channel) => {\n    this.setState({ selectedChannel: channel });\n  }\n\n  displayImages = () => {\n    const { selectedChannel, beforeTimes, afterTimes } = this.state;\n    return (\n      <div>\n        <SelectImage onSelect={this.changeChannel} selectedImage={selectedChannel} />\n        <ImageList outputDirectory={'outputgpstimepre'} times={beforeTimes} channel={selectedChannel} />\n        <ImageList outputDirectory={'apriloct'} times={afterTimes} channel={selectedChannel} />\n      </div>\n    );\n  }\n\n  handleChange = (val, event) => {\n    this.setState({ [val]: event.target.value });\n  }\n\n  saveTimes = () => {\n    const { selectedChannel, beforeTimes, afterTimes } = this.state;\n    if (!beforeTimes || !afterTimes) {\n      window.alert(\"Please provide times for both before and after.\")\n      return;\n    }\n\n    const tmpBefore = beforeTimes.replace(/\\r?\\n|\\r/g, '.0 ').split(' ').sort();\n    const tmpAfter = afterTimes.replace(/\\r?\\n|\\r/g, '.0 ').split(' ').sort();\n    this.setState({ inputSaved: true, beforeTimes: tmpBefore, afterTimes: tmpAfter });\n  }\n\n  displayInput = () => {\n    const { beforeTimes, afterTimes } = this.state;\n    return (\n      <div className=\"time-inputs\">\n        <div>\n          <h1>Before Times</h1>\n          <textarea\n            placeholder='Enter GPS Time Coordinates in list form'\n            onChange={(event) => this.handleChange('beforeTimes', event)} value={beforeTimes || ''} name=\"beforeTimes\">\n          </textarea>\n        </div>\n        <div>\n          <h1>After Times</h1>\n          <textarea\n            placeholder=\"Enter GPS Time Coordinates in list form\"\n            onChange={(event) => this.handleChange('afterTimes', event)} value={afterTimes || ''} name=\"afterTimes\">\n          </textarea>\n        </div>\n        <button type=\"submit\"\n          onClick={this.saveTimes}>Generate Images</button>\n      </div>\n    );\n  }\n\n  render() {\n    const { selectedChannel, beforeTimes, afterTimes, inputSaved } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <h1>Omega Scan Viewer</h1>\n        </div>\n        {inputSaved ? this.displayImages() : this.displayInput()}\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}